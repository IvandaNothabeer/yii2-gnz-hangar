<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\ListsWaypoints;
use app\models\ListsWaypointsSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use kartik\grid\EditableColumnAction;
use yii\data\ActiveDataProvider;

/**
* ListsWaypointsController implements the CRUD actions for ListsWaypoints model.
*/
class ListsWaypointsController extends Controller
{
    /**
    * @var boolean whether to enable CSRF validation for the actions in this controller.
    * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
    */
    public $enableCsrfValidation = false;

    /**
    * @inheritdoc
    */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'actions' => [
                            'index',
                            'view',
                            'create',
                            'update',
                            'delete',
                            'editable',
                            'editable-column-update',
                            'create-for-rel'
                        ],
                        'roles' => ['AppListsWaypointsFull'],
                    ],
                    [
                        'allow' => true,
                        'actions' => [
                            'index',
                            'view'
                        ],
                        'roles' => ['AppListsWaypointsView'],
                    ],
                    [
                        'allow' => true,
                        'actions' => [
                            'update',
                            'create',
                            'delete',
                            'editable',
                            'editable-column-update',
                            'create-for-rel'
                        ],
                        'roles' => ['AppListsWaypointsEdit'],
                    ],
                ],
            ],
        ];
    }

    public function actions() {
        return [
            'editable-column-update' => [
                'class' => EditableColumnAction::className(), // action class name
                'modelClass' => ListsWaypoints::className(),
            ],
        ];
    }    
    
    /**
    * Lists all ListsWaypoints models.
    * @return mixed
    */
    public function actionIndex()
    {
        $searchModel  = new ListsWaypointsSearch;
        $dataProvider = $searchModel->search($_GET);

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
        ]);
    }

    /**
     * Displays a single ListsWaypoints model.
     * @param integer $lists_id
	 * @param integer $waypoints_id
     *
     * @return mixed
     */
    public function actionView($lists_id, $waypoints_id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();

        return $this->render('view', [
            'model' => $this->findModel($lists_id, $waypoints_id),
        ]);
    }

    /**
     * Creates a new ListsWaypoints model.
     * If creation is successful, the browser will be redirected 
     *  to the 'view' page or back, if parameter $goBack is true.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new ListsWaypoints;
        $model->load($_GET);
        $relAttributes = $model->attributes;
        
        try {
            if ($model->load($_POST) && $model->save()) {
                if($relAttributes){
                    return $this->goBack();
                }      
                return $this->redirect(['view', 'lists_id' => $model->lists_id, 'waypoints_id' => $model->waypoints_id]);
            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            $model->addError('_exception', $msg);
        }
        
        return $this->render('create', [
            'model' => $model,
            'relAttributes' => $relAttributes,            
            ]);
    }
    
    /**
     * Add a new TestContacts record for relation grid and redirect back.
     * @return mixed
     */
    public function actionCreateForRel()
    {
        $model = new ListsWaypoints;
        $model->load($_GET);
        $relAttributes = $model->attributes;
        $model->save();
        return $this->goBack();
    }
    
    /**
    * Updates an existing ListsWaypoints model.
    * If update is successful, the browser will be redirected to the 'view' page.
    * @param integer $lists_id
	 * @param integer $waypoints_id
    * @return mixed
    */
    public function actionUpdate($lists_id, $waypoints_id)
    {
        $model = new ListsWaypoints;
        $model->load($_GET);
        $relAttributes = $model->attributes;
        
        $model = $this->findModel($lists_id, $waypoints_id);

        if ($model->load($_POST) && $model->save()) {
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
                'relAttributes' => $relAttributes                
            ]);
        }
    }

    /**
    * Deletes an existing ListsWaypoints model.
    * If deletion is successful, the browser will be redirected to the 'index' page.
    * @param integer $lists_id
	 * @param integer $waypoints_id
    * @return mixed
    */
    public function actionDelete($lists_id, $waypoints_id)
    {
        try {
            $this->findModel($lists_id, $waypoints_id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

        $model = new ListsWaypoints;
        $model->load($_GET);
        $relAttributes = $model->attributes;       
        if($relAttributes){
            return $this->redirect(Url::previous());
        }        
        
        // TODO: improve detection
        $isPivot = strstr('$lists_id, $waypoints_id',',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
    * Update ListsWaypoints model record by editable.
    * @param integer $lists_id
	 * @param integer $waypoints_id
    * @return mixed
    */    
    public function actionEditable($lists_id, $waypoints_id){
        
        // Check if there is an Editable ajax request
        if (!isset($_POST['hasEditable'])) {
            return false;
        }
        
        $post = [];
        foreach($_POST as $name => $value){
            //if(in_array($name,$this->editAbleFileds)){
                $post[$name] = $value;
            //}
        }
        
        // use Yii's response format to encode output as JSON
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;        
        if(!$post){
            return ['output'=>'', 'message'=> 'Can not update this field'];
        }

        $model = $this->findModel($lists_id, $waypoints_id);
        $model->setAttributes($post, true);
        // read your posted model attributes
        if ($model->save()) {
            // read or convert your posted information
            $value = $model->$name;

            // return JSON encoded output in the below format
            return ['output'=>$value, 'message'=>''];

            // alternatively you can return a validation error
            // return ['output'=>'', 'message'=>'Validation error'];
        }
        // else if nothing to do always return an empty JSON encoded output
        else {
            //  return ['output'=>'', 'message'=>''];
            $errors = [];
            foreach($model->errors as $field => $messages){
                foreach($messages as $message){
                    $errors[] = $model->getAttributeLabel($field) 
                            . ': '
                            . $message;
                }
            }
            return ['output'=>'', 'message'=>implode('<br>',$errors)];
            
        }
        
    }    

    /**
    * Finds the ListsWaypoints model based on its primary key value.
    * If the model is not found, a 404 HTTP exception will be thrown.
    * @param integer $lists_id
	 * @param integer $waypoints_id
    * @return ListsWaypoints the loaded model
    * @throws HttpException if the model cannot be found
    */
    protected function findModel($lists_id, $waypoints_id)
    {
        if (($model = ListsWaypoints::findOne(['lists_id' => $lists_id, 'waypoints_id' => $waypoints_id])) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }
}
